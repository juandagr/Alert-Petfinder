// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`expect to render PetCard component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Header />,
        <Switch>
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(PetsPage)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            exact={true}
            path="/"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(PetsDetails)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            path="/details/:id"
          />
          <Route
            component={[Function]}
            exact={true}
            path="/about"
          />
        </Switch>,
      ],
      "className": "App",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(PetsPage)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              exact={true}
              path="/"
            />,
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(PetsDetails)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              path="/details/:id"
            />,
            <Route
              component={[Function]}
              exact={true}
              path="/about"
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(PetsPage)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
              "exact": true,
              "path": "/",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(PetsDetails)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
              "path": "/details/:id",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "exact": true,
              "path": "/about",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Header />,
          <Switch>
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(PetsPage)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              exact={true}
              path="/"
            />
            <Route
              component={
                Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(PetsDetails)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                }
              }
              path="/details/:id"
            />
            <Route
              component={[Function]}
              exact={true}
              path="/about"
            />
          </Switch>,
        ],
        "className": "App",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Route
                component={
                  Object {
                    "$$typeof": Symbol(react.memo),
                    "WrappedComponent": [Function],
                    "compare": null,
                    "displayName": "Connect(PetsPage)",
                    "type": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                exact={true}
                path="/"
              />,
              <Route
                component={
                  Object {
                    "$$typeof": Symbol(react.memo),
                    "WrappedComponent": [Function],
                    "compare": null,
                    "displayName": "Connect(PetsDetails)",
                    "type": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                path="/details/:id"
              />,
              <Route
                component={[Function]}
                exact={true}
                path="/about"
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(PetsPage)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                },
                "exact": true,
                "path": "/",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(PetsDetails)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                },
                "path": "/details/:id",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "exact": true,
                "path": "/about",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;
